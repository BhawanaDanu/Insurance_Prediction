# -*- coding: utf-8 -*-
"""Medical_Insurance_Predict.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KSQ1Uwz5L-Ppzx2ivN-WtIHd-0q6YTm2
"""

#inmporting the dependencies
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn import metrics

#datacollection and analysis
#loading the data from the csv file to a Pandas datafile
insurance_dataset=pd.read_csv('/content/insurance.csv')

#printing first five rows of the dataframe
insurance_dataset.head()

#number of rows and columns
insurance_dataset.shape

#getting some informations about the dataset
insurance_dataset.info()

#Totally we have 3 categorical features
#sex, smoker and region
#checking for missing value
insurance_dataset.isnull().sum()

#Data analysis 
#statistical measures of the dataset
insurance_dataset.describe()

#distribution of age value 
sns.set()
plt.figure(figsize=(6,6))
sns.distplot(insurance_dataset['age'])
plt.title('Age distribution')
plt.show()

#gender column
plt.figure(figsize=(6,6))
sns.countplot(x='sex',data=insurance_dataset)
plt.title('Sex Distribution')
plt.show()

insurance_dataset['sex'].value_counts()

#distribution of bmi value 
sns.set()
plt.figure(figsize=(6,6))
sns.distplot(insurance_dataset['bmi'])
plt.title('BMI distribution')
plt.show()

#normal bmi range is 18.5-24.9

#children column
plt.figure(figsize=(6,6))
sns.countplot(x='children',data=insurance_dataset)
plt.title('Children Distribution')
plt.show()

insurance_dataset['children'].value_counts()

#smoker column
plt.figure(figsize=(6,6))
sns.countplot(x='smoker',data=insurance_dataset)
plt.title('Smoker Distribution')
plt.show()

insurance_dataset['smoker'].value_counts()

#smoker column
plt.figure(figsize=(6,6))
sns.countplot(x='region',data=insurance_dataset)
plt.title('Region Distribution')
plt.show()

insurance_dataset['region'].value_counts()

#distribution of charges value 
sns.set()
plt.figure(figsize=(6,6))
sns.distplot(insurance_dataset['charges'])
plt.title('Charges distribution')
plt.show()

"""Data Processing"""

#encoding the categorical features
#encoding sex column
insurance_dataset.replace({'sex':{'male':0,'female':1}}, inplace=True)
# encoding 'smoker' column
insurance_dataset.replace({'smoker':{'yes':0,'no':1}}, inplace=True)

# encoding 'region' column
insurance_dataset.replace({'region':{'southeast':0,'southwest':1,'northeast':2,'northwest':3}}, inplace=True)

#splitting 
X=insurance_dataset.drop(columns='charges', axis=1)
Y=insurance_dataset['charges']

print(X)

print(Y)

#splitting the data into training data and test
X_train, X_test, Y_train, Y_test=train_test_split(X,Y,test_size=0.2,random_state=2)

print(X.shape, X_train.shape)

#model training
#Linear Regression Model
regressor=LinearRegression()

regressor.fit(X_train, Y_train)

#model evaluation
#prediction on training data
training_data_prediction=regressor.predict(X_train)

#R_squared value
r2_train=metrics.r2_score(Y_train,training_data_prediction)
print(r2_train)

test_data_prediction=regressor.predict(X_test)

r2_test=metrics.r2_score(Y_test,test_data_prediction)
print(r2_test)

input_data=(62,1,26.29,0,0,0)
input_data_as_array=np.asarray(input_data)
input_data_reshaped=input_data_as_array.reshape(1,-1)
prediction=regressor.predict(input_data_reshaped)
print(prediction)

